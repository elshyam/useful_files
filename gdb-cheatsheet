GDB or GNU Debugger

$ list					# list the source code 
	1). list line_number		#list source till specified line_number
	2). l 

$ break 
	1). break line_number		# create breakpoint at specified line_number

	2). break function_name()	# create breakpoint at specified function call

$ disassemble				#convert in to assembly language  

	1) disassemble function_name

$ help command_name			# give docs about command_name

$ info registers			# dump of all cpu registers
		*********************************************
		rsp -> stack pointer  
		rip -> intruction pointer

		********************************************	


$ print variable_name			# works in same stack frame

$ x					#examine command
   
                 x/FMT address

			FMT -> format 
			address -> address  

**********************************************************************************************************************************************
$ continue or c				# run program till it hit breakpoint or jump to breakpoint


$ next					# run program line by line and and on every hit it prints next line it is going to execute
					# it don't go into the function i.e., it step over the function


$ step					# it runs line by line with stepping into function definations

$ nexti					# per instruction

$ stepi					# per instruction


**********************************************************************************************************************************************
$ info breakpoints			# show all the breakpoints with number


$ delete breakpoint_number		# delete specific breakpoint


$ bt					#backtrace

$ print *(struct mystruct *) 0x8002bf20  # print content of struct mystruct

$ bt                                      #backtrace
$ info frame
$ break filename:function_name            #useful for binary with multiple files
$ print/x $rip                            # where x represents hex format
$ gdb -tui

To debug binaries with argumenst
1). $ gdb --args executablename arg1 arg2 arg3
2). $ gdb execuatble
   then inside gdb prompt
   (gdb)run argument1 argument2 ... argumentN
   to run argument with some file content
   (gdb) run argument1 argument2 ... argumentN > file 
   
   or incase of nft
   (gdb) run > file argument1 argument2 ... argumentN  works fine
   for example to debug
     $ cat rules.json | nft import json
     $ gdb nft 	       
       (gdb)run > rules.json import json
               
We cannot set "break" at functions which are optimised by the compiler. To check those optimised functions
either
"step" into those optimised functions
or 
Put the optimisation off at compile time, with following flags
1)./configure CFLAGS='-g -O0' CXXFLAGS='-g -O0' 
or 2) make CFLAGS='-g -O0' CXXFLAGS='-g -O0' clean all



someuseful links: https://blogs.oracle.com/ksplice/8-gdb-tricks-you-should-know
https://www.cs.virginia.edu/~cr4bd/4630/S2017/gdb-cheat.html
http://www.dirac.org/linux/gdb/  #Author
https://github.com/eposts/Rich/blob/master/blog/Linux/The.Art.of.Debugging.with.GDB.DDD.and.Eclipse.pdf



	
